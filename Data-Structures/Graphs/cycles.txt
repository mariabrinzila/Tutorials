    def cycles_matrix(self):
        """
        :return: void
        """
        trail = [None] * self.v
        has_cycles = False
        print("The cycles in the graph are: ")

        self.cycles_backtracking(trail, 0, has_cycles)

        if not has_cycles:
            print("The graph is acyclic")

    def cycles_backtracking(self, trail, position, has_cycles):
        for i in range(self.v):
            trail[position] = i

            if self.check_cycle(trail, position):
                # Found a potential cycle
                if self.matrix[trail[position]][trail[0]] == 1:
                    has_cycles = True
                    print(trail)
                else:
                    self.cycles_backtracking(trail, position, has_cycles)

    def check_cycle(self, trail, position):
        # Cycle <=> trail where only the first and last vertices coincide
        for i in range(position):
            # Vertex repetition (not the first and last)
            if trail[i] == trail[position]:
                return False

            # Not neighbours
            if position > 1 and self.matrix[trail[position - 1]][trail[position]] == 0:
                return False

        return True